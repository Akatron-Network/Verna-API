//-- RedTape Database Scheme


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  username                String      @id
  displayname             String
  password                String
  permissions             Json?
  admin                   Boolean     @default(false)
  register_date           DateTime    @default(now())
  register_ip             String?
  lastlogin_date          DateTime?
  lastlogin_ip            String?
  old_password            String?

  company_code            String

  registered_currents     Current[]
  registered_curr_act     CurrentActivity[]
  registered_stocks       Stock[]
  registered_orders       Order[]
  registered_offers       Offer[]
  registered_tasks        Task[] @relation("registered_tasks")
  assigned_tasks          Task[] @relation("assigned_tasks")
  responsible_steps       TaskStep[]
}


model Current {
  id                    Int           @id @default(autoincrement())
  name                  String
  current_type          String?
  address               String?
  province              String?
  district              String?
  tax_office            String?
  tax_no                String?
  identification_no     String?
  phone                 String?
  phone_2               String?
  mail                  String?
  description           String?
  code_1                String?
  code_2                String?
  code_3                String?
  code_4                String?

  registry_date         DateTime      @default(now())
  registry_username     String?
  registry_user         User?         @relation(references: [username], fields: [registry_username])
  update_date           DateTime      @default(now())
  update_username       String?

  company_code          String

  activities            CurrentActivity[]
  orders                Order[]
  offers                Offer[]
}

model CurrentActivity {
  id                    Int         @id @default(autoincrement())
  current_id            Int
  current               Current     @relation(fields: [current_id], references: [id], onDelete: Cascade)
  date                  DateTime
  expiry_date           DateTime
  description           String?
  balance               Float

  type                  String?
  content               Json?

  debt_order_id         Int?        @unique
  debt_order            Order?      @relation(fields: [debt_order_id], references: [id], name: "debt", onDelete: Cascade, onUpdate: Restrict)
  credit_order_id       Int?        @unique
  credit_order          Order?      @relation(fields: [credit_order_id], references: [id], name: "credit", onDelete: Cascade, onUpdate: Restrict)

  registry_date         DateTime
  registry_username     String?
  registry_user         User?       @relation(references: [username], fields: [registry_username])
  update_date           DateTime    @default(now())
  update_username       String?

  company_code          String
}

model Stock {
  id                    Int         @id @default(autoincrement())
  name                  String
  material              String?
  product_group         String?
  unit                  String?
  unit_2                String?
  conversion_rate       Float?
  buy_price             Float?
  sell_price            Float?
  code_1                String?
  code_2                String?
  code_3                String?
  code_4                String?

  registry_date         DateTime
  registry_username     String?
  registry_user         User?       @relation(references: [username], fields: [registry_username])
  update_date           DateTime    @default(now())
  update_username       String?

  company_code          String

  orders                OrderItem[]
  offers                OfferItem[]
}

model Offer {
  id                    Int         @id @default(autoincrement())

  current_id            Int?
  current               Current?    @relation(references: [id], fields: [current_id], onDelete: Cascade)
  unregistered_current  Json?

  date                  DateTime    @default(now())
  delivery_date         DateTime    @default(now())
  order_source          String?
  invoiced              Boolean     @default(false)
  printed               Boolean     @default(false)
  total_fee             Float
  
  code_1                String?
  code_2                String?
  code_3                String?
  code_4                String?

  registry_date         DateTime    @default(now())
  registry_username     String?
  registry_user         User?       @relation(references: [username], fields: [registry_username])
  update_date           DateTime    @default(now())
  update_username       String?

  company_code          String

  items                 OfferItem[]
  order                 Order?
}

model OfferItem {
  id                    Int         @id @default(autoincrement())
  row                   Int?
  offer_id              Int
  offer                 Offer       @relation(references: [id], fields: [offer_id], onDelete: Cascade)
  stock_id              Int
  stock                 Stock       @relation(references: [id], fields: [stock_id], onDelete: Cascade)
  unit                  String?
  amount                Float
  price                 Float
  tax_rate              Float?
  description           String?

  registry_date         DateTime    @default(now())
  registry_username     String?
  
  company_code          String
}

model Order {
  id                    Int         @id @default(autoincrement())
  current_id            Int
  current               Current     @relation(references: [id], fields: [current_id], onDelete: Cascade)

  offer_id              Int?        @unique
  offer                 Offer?      @relation(references: [id], fields: [offer_id])

  date                  DateTime    @default(now())
  delivery_date         DateTime    @default(now())
  order_source          String?
  invoiced              Boolean     @default(false)
  printed               Boolean     @default(false)
  total_fee             Float
  code_1                String?
  code_2                String?
  code_3                String?
  code_4                String?

  token_key             String?     @unique

  debt_current_act      CurrentActivity?  @relation(name: "debt")
  credit_current_act    CurrentActivity?  @relation(name: "credit")

  registry_date         DateTime    @default(now())
  registry_username     String?
  registry_user         User?       @relation(references: [username], fields: [registry_username])
  update_date           DateTime    @default(now())
  update_username       String?

  company_code          String
  
  items                 OrderItem[]
  task                  Task?
}

model OrderItem {
  id                    Int         @id @default(autoincrement())
  row                   Int?
  order_id              Int
  order                 Order       @relation(references: [id], fields: [order_id], onDelete: Cascade)
  stock_id              Int
  stock                 Stock       @relation(references: [id], fields: [stock_id], onDelete: Cascade)
  unit                  String?
  amount                Float
  price                 Float
  tax_rate              Float?
  description           String?

  registry_date         DateTime    @default(now())
  registry_username     String?

  company_code          String
}

model Task {
  id                    Int                 @id @default(autoincrement())
  order_id              Int                 @unique
  order                 Order               @relation(references: [id], fields: [order_id], onDelete: Cascade)

  description           String?
  planned_finish_date   DateTime            @default(now())
  finish_date           DateTime?
  closed                Boolean             @default(false)
  state                 String              @default("Aktif")

  assigned_username     String?
  assigned_user         User?               @relation(references: [username], fields: [assigned_username], name: "assigned_tasks")

  previous_step_id      Int?                @unique
  current_step_id       Int?                @unique
  next_step_id          Int?                @unique
  previous_step         TaskStep?           @relation(references: [id], fields: [previous_step_id],     name: "previous_step")
  current_step          TaskStep?           @relation(references: [id], fields: [current_step_id],  name: "current_step")
  next_step             TaskStep?           @relation(references: [id], fields: [next_step_id],     name: "next_step")

  logs                  TaskLog[]
  task_steps            TaskStep[]

  registry_date         DateTime            @default(now())
  registry_username     String?
  registry_user         User?               @relation(references: [username], fields: [registry_username], name: "registered_tasks")
  update_date           DateTime            @default(now())
  update_username       String?
  
  company_code          String
}

model TaskStep {
  id                    Int                 @id @default(autoincrement())
  task_id               Int
  task                  Task                @relation(references: [id], fields: [task_id], onDelete: Cascade)
  
  row                   Int
  name                  String
  responsible_username  String?
  complate_description  String?
  planned_finish_date   DateTime            @default(now())
  start_date            DateTime?
  complate_date         DateTime?

  company_code          String

  previous_step_to      Task?               @relation("previous_step")
  current_step_to       Task?               @relation("current_step")
  next_step_to          Task?               @relation("next_step")
  responsible_user      User?               @relation(references: [username], fields: [responsible_username])
}

model TaskLog {
  id                    Int                 @id @default(autoincrement())
  task_id               Int
  task                  Task                @relation(references: [id], fields: [task_id], onDelete: Cascade)
  explanation           String?
  registry_date         DateTime            @default(now())
  registry_username     String?
  
  company_code          String
}
